========== KNOWELEDGE ==========
Object-Oriented Programming (OOP)
Data Structures
Algorithms
concurrent/multi-thread programming.
Standard Template Library (STL)
Software Development Life Cycle (SDLC) -- Software Design/Software Development
Debugging

===== ========== ========== =====
========== Resource ==========
http://www.globalguideline.com/interview_questions/Questions.php?sc=C_Plus_Plus_Friend
===== ========== ========== =====
========== Telecom ==========
Internet Protocol Suite (TCP/IP)
VoIP protocols (SIP) Session Initiation Protocol
Socket Programming
In depth experience in VOIP / SIP / RTSP / XMPP protocols
Good knowledge of RTP/RTCP protocols.
========== SIP ==========

--sip flow  -- https://www.tech-invite.com/fo-sip/tinv-fo-sip-service-04-05.html
-- sip flow -- https://siptestingknowledge.blogspot.com/p/updates-in-blog.html
-- SIP Q and A  -- https://www.wisdomjobs.com/e-university/session-initiation-protocol-interview-questions.htmll
https://www.wisdomjobs.com/e-university/session-initiation-protocol-interview-questions.html
-- ps://www.3cx.com/blog/voip-howto/sdp-voip2/
-- RFC -- https://tools.ietf.org/html/rfc3261


===== ========== ========== =====
    
    
    
    

========== C++ ==========
9. how do u achieve polymorphism- how many V-tables created
10.  sort 100110
11. factorial program
12. Inheritence
13. Deletion of linked list
14.  what is inline
16.	can we have exception within constructor
17.	how can we delete an element in a list
18.	what is the difference between struct and union
19.	how can i store integer variable in 2 bytes in struct
20.	how many different ways you can access elements of an array
21.	what is function pointer
22.	and syntax of function pointer
23.	ans where will you use function pointer
24.	abstract class and its use
25.	what is abstraction
26.	How many nested try-catch blocks can we have
27.	- private protected
28.	- exception
29.	- macros
30.	- constants and assigning values
31.	- smart pointers
32.	- singleton class and use
33.	- diamond inheritance and how to solve it
34.	- overloading and overriding
35.	- write a function to reverse a string
36.	- write a function to find the number of one's in a binary equivalent number
37.	- shallow copy and deep copy
38.	- how you can make derived class to not share its try-catch block with its base class
39.	- template specialization
40.	- inline and macro definition differences
41.	- abstract class
42.	- interface
43.	- exceptions


1.	exclusive -or operator - ^

2.	Struct{
	char * name;
	int age;
	}
	
3.	1. create typedef for above
	2. create pointer index of 5
	3. dynmice allocate
	4. read from user
	5. deallocate
4	---- in C++ default constructor4.	
	II pointer to function in typedef with return value int
	III  swap with pointer and reference
	IV cluster table in Oracle
	V &=, |=  explain
	VI atexit(func)
5.	for(int i=0; i<0xffffff;i++);
	_exit(0)
	
	atexit()- calls or not
	
6.	VII - constant pointer - pointer constant
7.	VIII- fork system call
8.	IX- what u expect from the new organization

1.	Why we need runtime polymorphism -  Factory design pattern – here no need to change the client code – as implementing DLL/runtime library
2.	Challenge – how we can restrict from the access/unwanted from DLL
3.	Protected inheritance -  benefits
4.	Base class and inheritance usage?
5.	Data abstraction vs data encapsulation
6.	What is PROCESS why we need and is there any difference between process and thread!!
7.	Differences between Static and Dynamic library
8.	Factory design pattern
9.	 Explain in technical words like abstract – client – how to achieve
10.	Frameworks – library – API development -  
11.	MVC -  Observer/Observable 
12.	If data not used in class – interface
13.	What is abstract class and why we need it
14.	 the Experience using Object Oriented concepts (inheritance, overriding, overloading, etc.)
15.	 C++, XML, Reader Protocol, RFID, Sockets, multi threading, DOM. sockets on Linux

1.	How you initialize const int member in a class
2.	You have base class and virtual function and you have to overrided that function in derived class
3.	but when you create an object of derived class you want to make sure only base class function is called not the derived class override function
4.	recursive functions
5.	write a linked list to reverse
6.	What is memory leak
7.	why memory leaks, how it happens, how you find it, how you fix it-

1. Difference between Struct and class
2.  class abc{
    } 
    main (){
    abc a = new abc();
    abc a1();
    will it work ?
  3. function with two pointer integer and retruns pointer - write syntax
  4. Function pointer with two integer pointer parameter - write syntax 
  
  1. Factory Method
  2. 
    
